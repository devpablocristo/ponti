// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/alphacodinggroup/euxcel-backend/pkg/authe/jwt/v5"
	"github.com/alphacodinggroup/euxcel-backend/pkg/databases/cache/redis/v8"
	"github.com/alphacodinggroup/euxcel-backend/pkg/databases/sql/gorm"
	"github.com/alphacodinggroup/euxcel-backend/pkg/databases/sql/postgresql/pgxpool"
	"github.com/alphacodinggroup/euxcel-backend/pkg/http/clients/resty"
	"github.com/alphacodinggroup/euxcel-backend/pkg/http/middlewares/gin"
	"github.com/alphacodinggroup/euxcel-backend/pkg/http/servers/gin"
	"github.com/alphacodinggroup/euxcel-backend/pkg/notification/smtp"
	"github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/authe"
	"github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/category"
	"github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/config"
	"github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/crop"
	"github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/customer"
	"github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/field"
	"github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/investor"
	"github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/item"
	"github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/lot"
	"github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/macrocategory"
	"github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/notification"
	"github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/person"
	"github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/project"
	"github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/supplier"
	"github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/user"
)

// Injectors from wire.go:

// Initialize se encarga de inyectar todas las dependencias usando Wire.
func Initialize() (*Dependencies, error) {
	loader, err := ProvideConfigLoader()
	if err != nil {
		return nil, err
	}
	server, err := ProvideGinServer()
	if err != nil {
		return nil, err
	}
	repository, err := ProvideGormRepository()
	if err != nil {
		return nil, err
	}
	pkgpostgresqlRepository, err := ProvidePostgresRepository()
	if err != nil {
		return nil, err
	}
	cache, err := ProvideRedisCache()
	if err != nil {
		return nil, err
	}
	service, err := ProvideJwtService()
	if err != nil {
		return nil, err
	}
	client, err := ProvideHttpClient()
	if err != nil {
		return nil, err
	}
	pkgsmtpService, err := ProvideSmtpService()
	if err != nil {
		return nil, err
	}
	handlerFunc, err := ProvideJwtMiddleware()
	if err != nil {
		return nil, err
	}
	middlewares, err := ProvideMiddlewares(handlerFunc)
	if err != nil {
		return nil, err
	}
	personRepository, err := ProvidePersonRepository(pkgpostgresqlRepository)
	if err != nil {
		return nil, err
	}
	useCases := ProvidePersonUseCases(personRepository)
	handler := ProvidePersonHandler(server, useCases, middlewares)
	userRepository, err := ProvideUserRepository(repository)
	if err != nil {
		return nil, err
	}
	userUseCases := ProvideUserUseCases(userRepository)
	userHandler := ProvideUserHandler(server, userUseCases, middlewares)
	autheCache, err := ProvideAutheCache(cache)
	if err != nil {
		return nil, err
	}
	jwtService, err := ProvideAutheJwtService(service, loader)
	if err != nil {
		return nil, err
	}
	httpClient, err := ProvideAutheHttpClient(client, loader)
	if err != nil {
		return nil, err
	}
	autheUseCases := ProvideAutheUseCases(autheCache, jwtService, httpClient)
	autheHandler := ProvideAutheHandler(server, autheUseCases, middlewares)
	smtpService, err := ProvideNotificationSmtpService(pkgsmtpService)
	if err != nil {
		return nil, err
	}
	notificationUseCases := ProvideNotificationUseCases(smtpService)
	notificationHandler := ProvideNotificationHandler(server, notificationUseCases, middlewares)
	itemRepository, err := ProvideItemRepository(repository)
	if err != nil {
		return nil, err
	}
	itemUseCases := ProvideItemUseCases(itemRepository, loader, autheUseCases)
	itemHandler := ProvideItemHandler(server, itemUseCases, middlewares)
	categoryRepository, err := ProvideCategoryRepository(repository)
	if err != nil {
		return nil, err
	}
	categoryUseCases := ProvideCategoryUseCases(categoryRepository)
	categoryHandler := ProvideCategoryHandler(server, categoryUseCases, middlewares)
	macrocategoryRepository, err := ProvideMacroCategoryRepository(repository)
	if err != nil {
		return nil, err
	}
	macrocategoryUseCases := ProvideMacroCategoryUseCases(macrocategoryRepository)
	macrocategoryHandler := ProvideMacroCategoryHandler(server, macrocategoryUseCases, middlewares)
	supplierRepository, err := ProvideSupplierRepository(repository)
	if err != nil {
		return nil, err
	}
	supplierUseCases := ProvideSupplierUseCases(supplierRepository)
	supplierHandler := ProvideSupplierHandler(server, supplierUseCases, middlewares)
	cropRepository, err := ProvideCropRepository(repository)
	if err != nil {
		return nil, err
	}
	cropUseCases := ProvideCropUseCases(cropRepository)
	cropHandler := ProvideCropHandler(server, cropUseCases, middlewares)
	customerRepository, err := ProvideCustomerRepository(repository)
	if err != nil {
		return nil, err
	}
	customerUseCases := ProvideCustomerUseCases(customerRepository)
	customerHandler := ProvideCustomerHandler(server, customerUseCases, middlewares)
	fieldRepository, err := ProvideFieldRepository(repository)
	if err != nil {
		return nil, err
	}
	fieldUseCases := ProvideFieldUseCases(fieldRepository)
	fieldHandler := ProvideFieldHandler(server, fieldUseCases, middlewares)
	investorRepository, err := ProvideInvestorRepository(repository)
	if err != nil {
		return nil, err
	}
	investorUseCases := ProvideInvestorUseCases(investorRepository)
	investorHandler := ProvideInvestorHandler(server, investorUseCases, middlewares)
	lotRepository, err := ProvideLotRepository(repository)
	if err != nil {
		return nil, err
	}
	lotUseCases := ProvideLotUseCases(lotRepository)
	lotHandler := ProvideLotHandler(server, lotUseCases, middlewares)
	projectRepository, err := ProvideProjectRepository(repository)
	if err != nil {
		return nil, err
	}
	projectUseCases := ProvideProjectUseCases(projectRepository)
	projectHandler := ProvideProjectHandler(server, projectUseCases, middlewares)
	dependencies := &Dependencies{
		ConfigLoader:         loader,
		GinServer:            server,
		GormRepository:       repository,
		PostgresRepository:   pkgpostgresqlRepository,
		RedisCache:           cache,
		JwtService:           service,
		RestyClient:          client,
		SmtpService:          pkgsmtpService,
		Middlewares:          middlewares,
		PersonHandler:        handler,
		UserHandler:          userHandler,
		AutheHandler:         autheHandler,
		NotificationHandler:  notificationHandler,
		ItemHandler:          itemHandler,
		CategoryHandler:      categoryHandler,
		MacroCategoryHandler: macrocategoryHandler,
		SupplierHandler:      supplierHandler,
		CropHandler:          cropHandler,
		CustomerHandler:      customerHandler,
		FieldHandler:         fieldHandler,
		InvestorHandler:      investorHandler,
		LotHandler:           lotHandler,
		ProjectHandler:       projectHandler,
		PersonUseCases:       useCases,
		UserUseCases:         userUseCases,
		ItemUseCases:         itemUseCases,
		CropUseCases:         cropUseCases,
		CustomerUseCases:     customerUseCases,
		FieldUseCases:        fieldUseCases,
		InvestorUseCases:     investorUseCases,
		LotUseCases:          lotUseCases,
		ProjectUseCases:      projectUseCases,
	}
	return dependencies, nil
}

// wire.go:

// Dependencies reúne todas las dependencias de la aplicación que se inyectan con Wire.
type Dependencies struct {
	ConfigLoader       config.Loader
	GinServer          pkggin.Server
	GormRepository     pkggorm.Repository
	PostgresRepository pkgpostgresql.Repository
	RedisCache         pkgredis.Cache
	JwtService         pkgjwt.Service
	RestyClient        pkcresty.Client
	SmtpService        pkgsmtp.Service

	Middlewares *pkgmwr.Middlewares

	PersonHandler        *person.Handler
	UserHandler          *user.Handler
	AutheHandler         *authe.Handler
	NotificationHandler  *notification.Handler
	ItemHandler          *item.Handler
	CategoryHandler      *category.Handler
	MacroCategoryHandler *macrocategory.Handler
	SupplierHandler      *supplier.Handler

	// Nuevas entidades
	CropHandler     *crop.Handler
	CustomerHandler *customer.Handler
	FieldHandler    *field.Handler
	InvestorHandler *investor.Handler
	LotHandler      *lot.Handler
	ProjectHandler  *project.Handler

	// Para pruebas (use cases existentes y de nuevas entidades si se requieren)
	PersonUseCases   person.UseCases
	UserUseCases     user.UseCases
	ItemUseCases     item.UseCases
	CropUseCases     crop.UseCases
	CustomerUseCases customer.UseCases
	FieldUseCases    field.UseCases
	InvestorUseCases investor.UseCases
	LotUseCases      lot.UseCases
	ProjectUseCases  project.UseCases
}
