// Code generated by MockGen. DO NOT EDIT.
// Source: internal/investor/ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/alphacodinggroup/ponti-backend/projects/ponti-api/internal/investor/usecases/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCases is a mock of UseCases interface.
type MockUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockUseCasesMockRecorder
}

// MockUseCasesMockRecorder is the mock recorder for MockUseCases.
type MockUseCasesMockRecorder struct {
	mock *MockUseCases
}

// NewMockUseCases creates a new mock instance.
func NewMockUseCases(ctrl *gomock.Controller) *MockUseCases {
	mock := &MockUseCases{ctrl: ctrl}
	mock.recorder = &MockUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCases) EXPECT() *MockUseCasesMockRecorder {
	return m.recorder
}

// CreateInvestor mocks base method.
func (m *MockUseCases) CreateInvestor(ctx context.Context, inv *domain.Investor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvestor", ctx, inv)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvestor indicates an expected call of CreateInvestor.
func (mr *MockUseCasesMockRecorder) CreateInvestor(ctx, inv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvestor", reflect.TypeOf((*MockUseCases)(nil).CreateInvestor), ctx, inv)
}

// DeleteInvestor mocks base method.
func (m *MockUseCases) DeleteInvestor(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvestor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvestor indicates an expected call of DeleteInvestor.
func (mr *MockUseCasesMockRecorder) DeleteInvestor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvestor", reflect.TypeOf((*MockUseCases)(nil).DeleteInvestor), ctx, id)
}

// GetInvestor mocks base method.
func (m *MockUseCases) GetInvestor(ctx context.Context, id int64) (*domain.Investor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvestor", ctx, id)
	ret0, _ := ret[0].(*domain.Investor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvestor indicates an expected call of GetInvestor.
func (mr *MockUseCasesMockRecorder) GetInvestor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvestor", reflect.TypeOf((*MockUseCases)(nil).GetInvestor), ctx, id)
}

// ListInvestors mocks base method.
func (m *MockUseCases) ListInvestors(ctx context.Context) ([]domain.Investor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvestors", ctx)
	ret0, _ := ret[0].([]domain.Investor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvestors indicates an expected call of ListInvestors.
func (mr *MockUseCasesMockRecorder) ListInvestors(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvestors", reflect.TypeOf((*MockUseCases)(nil).ListInvestors), ctx)
}

// UpdateInvestor mocks base method.
func (m *MockUseCases) UpdateInvestor(ctx context.Context, inv *domain.Investor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvestor", ctx, inv)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInvestor indicates an expected call of UpdateInvestor.
func (mr *MockUseCasesMockRecorder) UpdateInvestor(ctx, inv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvestor", reflect.TypeOf((*MockUseCases)(nil).UpdateInvestor), ctx, inv)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateInvestor mocks base method.
func (m *MockRepository) CreateInvestor(ctx context.Context, inv *domain.Investor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvestor", ctx, inv)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvestor indicates an expected call of CreateInvestor.
func (mr *MockRepositoryMockRecorder) CreateInvestor(ctx, inv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvestor", reflect.TypeOf((*MockRepository)(nil).CreateInvestor), ctx, inv)
}

// DeleteInvestor mocks base method.
func (m *MockRepository) DeleteInvestor(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvestor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvestor indicates an expected call of DeleteInvestor.
func (mr *MockRepositoryMockRecorder) DeleteInvestor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvestor", reflect.TypeOf((*MockRepository)(nil).DeleteInvestor), ctx, id)
}

// GetInvestor mocks base method.
func (m *MockRepository) GetInvestor(ctx context.Context, id int64) (*domain.Investor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvestor", ctx, id)
	ret0, _ := ret[0].(*domain.Investor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvestor indicates an expected call of GetInvestor.
func (mr *MockRepositoryMockRecorder) GetInvestor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvestor", reflect.TypeOf((*MockRepository)(nil).GetInvestor), ctx, id)
}

// ListInvestors mocks base method.
func (m *MockRepository) ListInvestors(ctx context.Context) ([]domain.Investor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvestors", ctx)
	ret0, _ := ret[0].([]domain.Investor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvestors indicates an expected call of ListInvestors.
func (mr *MockRepositoryMockRecorder) ListInvestors(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvestors", reflect.TypeOf((*MockRepository)(nil).ListInvestors), ctx)
}

// UpdateInvestor mocks base method.
func (m *MockRepository) UpdateInvestor(ctx context.Context, inv *domain.Investor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvestor", ctx, inv)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInvestor indicates an expected call of UpdateInvestor.
func (mr *MockRepositoryMockRecorder) UpdateInvestor(ctx, inv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvestor", reflect.TypeOf((*MockRepository)(nil).UpdateInvestor), ctx, inv)
}
