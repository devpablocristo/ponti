// Code generated by MockGen. DO NOT EDIT.
// Source: internal/lot/ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/alphacodinggroup/ponti-backend/projects/ponti-api/internal/lot/usecases/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCases is a mock of UseCases interface.
type MockUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockUseCasesMockRecorder
}

// MockUseCasesMockRecorder is the mock recorder for MockUseCases.
type MockUseCasesMockRecorder struct {
	mock *MockUseCases
}

// NewMockUseCases creates a new mock instance.
func NewMockUseCases(ctrl *gomock.Controller) *MockUseCases {
	mock := &MockUseCases{ctrl: ctrl}
	mock.recorder = &MockUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCases) EXPECT() *MockUseCasesMockRecorder {
	return m.recorder
}

// CreateLot mocks base method.
func (m *MockUseCases) CreateLot(arg0 context.Context, arg1 *domain.Lot) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLot", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLot indicates an expected call of CreateLot.
func (mr *MockUseCasesMockRecorder) CreateLot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLot", reflect.TypeOf((*MockUseCases)(nil).CreateLot), arg0, arg1)
}

// DeleteLot mocks base method.
func (m *MockUseCases) DeleteLot(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLot indicates an expected call of DeleteLot.
func (mr *MockUseCasesMockRecorder) DeleteLot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLot", reflect.TypeOf((*MockUseCases)(nil).DeleteLot), arg0, arg1)
}

// GetLot mocks base method.
func (m *MockUseCases) GetLot(arg0 context.Context, arg1 int64) (*domain.Lot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLot", arg0, arg1)
	ret0, _ := ret[0].(*domain.Lot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLot indicates an expected call of GetLot.
func (mr *MockUseCasesMockRecorder) GetLot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLot", reflect.TypeOf((*MockUseCases)(nil).GetLot), arg0, arg1)
}

// ListLots mocks base method.
func (m *MockUseCases) ListLots(arg0 context.Context) ([]domain.Lot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLots", arg0)
	ret0, _ := ret[0].([]domain.Lot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLots indicates an expected call of ListLots.
func (mr *MockUseCasesMockRecorder) ListLots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLots", reflect.TypeOf((*MockUseCases)(nil).ListLots), arg0)
}

// UpdateLot mocks base method.
func (m *MockUseCases) UpdateLot(arg0 context.Context, arg1 *domain.Lot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLot indicates an expected call of UpdateLot.
func (mr *MockUseCasesMockRecorder) UpdateLot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLot", reflect.TypeOf((*MockUseCases)(nil).UpdateLot), arg0, arg1)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateLot mocks base method.
func (m *MockRepository) CreateLot(arg0 context.Context, arg1 *domain.Lot) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLot", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLot indicates an expected call of CreateLot.
func (mr *MockRepositoryMockRecorder) CreateLot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLot", reflect.TypeOf((*MockRepository)(nil).CreateLot), arg0, arg1)
}

// DeleteLot mocks base method.
func (m *MockRepository) DeleteLot(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLot indicates an expected call of DeleteLot.
func (mr *MockRepositoryMockRecorder) DeleteLot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLot", reflect.TypeOf((*MockRepository)(nil).DeleteLot), arg0, arg1)
}

// GetLot mocks base method.
func (m *MockRepository) GetLot(arg0 context.Context, arg1 int64) (*domain.Lot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLot", arg0, arg1)
	ret0, _ := ret[0].(*domain.Lot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLot indicates an expected call of GetLot.
func (mr *MockRepositoryMockRecorder) GetLot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLot", reflect.TypeOf((*MockRepository)(nil).GetLot), arg0, arg1)
}

// ListLots mocks base method.
func (m *MockRepository) ListLots(arg0 context.Context) ([]domain.Lot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLots", arg0)
	ret0, _ := ret[0].([]domain.Lot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLots indicates an expected call of ListLots.
func (mr *MockRepositoryMockRecorder) ListLots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLots", reflect.TypeOf((*MockRepository)(nil).ListLots), arg0)
}

// UpdateLot mocks base method.
func (m *MockRepository) UpdateLot(arg0 context.Context, arg1 *domain.Lot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLot indicates an expected call of UpdateLot.
func (mr *MockRepositoryMockRecorder) UpdateLot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLot", reflect.TypeOf((*MockRepository)(nil).UpdateLot), arg0, arg1)
}
