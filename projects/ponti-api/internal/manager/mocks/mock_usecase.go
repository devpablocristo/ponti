// Code generated by MockGen. DO NOT EDIT.
// Source: internal/manager/ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/alphacodinggroup/ponti-backend/projects/ponti-api/internal/manager/usecases/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCases is a mock of UseCases interface.
type MockUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockUseCasesMockRecorder
}

// MockUseCasesMockRecorder is the mock recorder for MockUseCases.
type MockUseCasesMockRecorder struct {
	mock *MockUseCases
}

// NewMockUseCases creates a new mock instance.
func NewMockUseCases(ctrl *gomock.Controller) *MockUseCases {
	mock := &MockUseCases{ctrl: ctrl}
	mock.recorder = &MockUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCases) EXPECT() *MockUseCasesMockRecorder {
	return m.recorder
}

// CreateManager mocks base method.
func (m *MockUseCases) CreateManager(ctx context.Context, c *domain.Manager) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManager", ctx, c)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManager indicates an expected call of CreateManager.
func (mr *MockUseCasesMockRecorder) CreateManager(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManager", reflect.TypeOf((*MockUseCases)(nil).CreateManager), ctx, c)
}

// DeleteManager mocks base method.
func (m *MockUseCases) DeleteManager(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteManager", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteManager indicates an expected call of DeleteManager.
func (mr *MockUseCasesMockRecorder) DeleteManager(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManager", reflect.TypeOf((*MockUseCases)(nil).DeleteManager), ctx, id)
}

// GetManager mocks base method.
func (m *MockUseCases) GetManager(ctx context.Context, id int64) (*domain.Manager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManager", ctx, id)
	ret0, _ := ret[0].(*domain.Manager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManager indicates an expected call of GetManager.
func (mr *MockUseCasesMockRecorder) GetManager(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManager", reflect.TypeOf((*MockUseCases)(nil).GetManager), ctx, id)
}

// ListManagers mocks base method.
func (m *MockUseCases) ListManagers(ctx context.Context) ([]domain.Manager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListManagers", ctx)
	ret0, _ := ret[0].([]domain.Manager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListManagers indicates an expected call of ListManagers.
func (mr *MockUseCasesMockRecorder) ListManagers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagers", reflect.TypeOf((*MockUseCases)(nil).ListManagers), ctx)
}

// UpdateManager mocks base method.
func (m *MockUseCases) UpdateManager(ctx context.Context, c *domain.Manager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateManager", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateManager indicates an expected call of UpdateManager.
func (mr *MockUseCasesMockRecorder) UpdateManager(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateManager", reflect.TypeOf((*MockUseCases)(nil).UpdateManager), ctx, c)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateManager mocks base method.
func (m *MockRepository) CreateManager(ctx context.Context, c *domain.Manager) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManager", ctx, c)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManager indicates an expected call of CreateManager.
func (mr *MockRepositoryMockRecorder) CreateManager(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManager", reflect.TypeOf((*MockRepository)(nil).CreateManager), ctx, c)
}

// DeleteManager mocks base method.
func (m *MockRepository) DeleteManager(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteManager", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteManager indicates an expected call of DeleteManager.
func (mr *MockRepositoryMockRecorder) DeleteManager(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManager", reflect.TypeOf((*MockRepository)(nil).DeleteManager), ctx, id)
}

// GetManager mocks base method.
func (m *MockRepository) GetManager(ctx context.Context, id int64) (*domain.Manager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManager", ctx, id)
	ret0, _ := ret[0].(*domain.Manager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManager indicates an expected call of GetManager.
func (mr *MockRepositoryMockRecorder) GetManager(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManager", reflect.TypeOf((*MockRepository)(nil).GetManager), ctx, id)
}

// ListManagers mocks base method.
func (m *MockRepository) ListManagers(ctx context.Context) ([]domain.Manager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListManagers", ctx)
	ret0, _ := ret[0].([]domain.Manager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListManagers indicates an expected call of ListManagers.
func (mr *MockRepositoryMockRecorder) ListManagers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagers", reflect.TypeOf((*MockRepository)(nil).ListManagers), ctx)
}

// UpdateManager mocks base method.
func (m *MockRepository) UpdateManager(ctx context.Context, c *domain.Manager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateManager", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateManager indicates an expected call of UpdateManager.
func (mr *MockRepositoryMockRecorder) UpdateManager(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateManager", reflect.TypeOf((*MockRepository)(nil).UpdateManager), ctx, c)
}
