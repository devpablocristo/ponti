// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/alphacodinggroup/ponti-backend/pkg/databases/sql/gorm"
	"github.com/alphacodinggroup/ponti-backend/pkg/databases/sql/postgresql/pgxpool"
	"github.com/alphacodinggroup/ponti-backend/pkg/http/middlewares/gin"
	"github.com/alphacodinggroup/ponti-backend/pkg/http/servers/gin"
	"github.com/alphacodinggroup/ponti-backend/pkg/notification/smtp"
	"github.com/alphacodinggroup/ponti-backend/projects/ponti-api/cmd/config"
	"github.com/alphacodinggroup/ponti-backend/projects/ponti-api/internal/crop"
	"github.com/alphacodinggroup/ponti-backend/projects/ponti-api/internal/customer"
	"github.com/alphacodinggroup/ponti-backend/projects/ponti-api/internal/field"
	"github.com/alphacodinggroup/ponti-backend/projects/ponti-api/internal/investor"
	"github.com/alphacodinggroup/ponti-backend/projects/ponti-api/internal/lot"
	"github.com/alphacodinggroup/ponti-backend/projects/ponti-api/internal/manager"
	"github.com/alphacodinggroup/ponti-backend/projects/ponti-api/internal/notification"
	"github.com/alphacodinggroup/ponti-backend/projects/ponti-api/internal/person"
	"github.com/alphacodinggroup/ponti-backend/projects/ponti-api/internal/project"
	"github.com/alphacodinggroup/ponti-backend/projects/ponti-api/internal/user"
)

// Injectors from wire.go:

func Initialize() (*Dependencies, error) {
	loader, err := ProvideConfigLoader()
	if err != nil {
		return nil, err
	}
	server, err := ProvideGinServer()
	if err != nil {
		return nil, err
	}
	repository, err := ProvideGormRepository()
	if err != nil {
		return nil, err
	}
	pkgpostgresqlRepository, err := ProvidePostgresRepository()
	if err != nil {
		return nil, err
	}
	service, err := ProvideSmtpService()
	if err != nil {
		return nil, err
	}
	handlerFunc, err := ProvideJwtMiddleware()
	if err != nil {
		return nil, err
	}
	middlewares, err := ProvideMiddlewares(handlerFunc)
	if err != nil {
		return nil, err
	}
	personRepository, err := ProvidePersonRepository(pkgpostgresqlRepository)
	if err != nil {
		return nil, err
	}
	useCases := ProvidePersonUseCases(personRepository)
	handler := ProvidePersonHandler(server, useCases, middlewares)
	userRepository, err := ProvideUserRepository(repository)
	if err != nil {
		return nil, err
	}
	userUseCases := ProvideUserUseCases(userRepository)
	userHandler := ProvideUserHandler(server, userUseCases, middlewares)
	smtpService, err := ProvideNotificationSmtpService(service)
	if err != nil {
		return nil, err
	}
	notificationUseCases := ProvideNotificationUseCases(smtpService)
	notificationHandler := ProvideNotificationHandler(server, notificationUseCases, middlewares)
	cropRepository, err := ProvideCropRepository(repository)
	if err != nil {
		return nil, err
	}
	cropUseCases := ProvideCropUseCases(cropRepository)
	cropHandler := ProvideCropHandler(server, cropUseCases, middlewares)
	customerRepository, err := ProvideCustomerRepository(repository)
	if err != nil {
		return nil, err
	}
	customerUseCases := ProvideCustomerUseCases(customerRepository)
	customerHandler := ProvideCustomerHandler(server, customerUseCases, middlewares)
	managerRepository, err := ProvideManagerRepository(repository)
	if err != nil {
		return nil, err
	}
	managerUseCases := ProvideManagerUseCases(managerRepository)
	managerHandler := ProvideManagerHandler(server, managerUseCases, middlewares)
	fieldRepository, err := ProvideFieldRepository(repository)
	if err != nil {
		return nil, err
	}
	lotRepository, err := ProvideLotRepository(repository)
	if err != nil {
		return nil, err
	}
	lotUseCases := ProvideLotUseCases(lotRepository, cropUseCases)
	fieldUseCases := ProvideFieldUseCases(fieldRepository, lotUseCases)
	fieldHandler := ProvideFieldHandler(server, fieldUseCases, middlewares)
	investorRepository, err := ProvideInvestorRepository(repository)
	if err != nil {
		return nil, err
	}
	investorUseCases := ProvideInvestorUseCases(investorRepository)
	investorHandler := ProvideInvestorHandler(server, investorUseCases, middlewares)
	lotHandler := ProvideLotHandler(server, lotUseCases, middlewares)
	projectRepository, err := ProvideProjectRepository(repository)
	if err != nil {
		return nil, err
	}
	projectUseCases := ProvideProjectUseCases(projectRepository, customerUseCases, managerUseCases, investorUseCases, fieldUseCases, lotUseCases)
	projectHandler := ProvideProjectHandler(server, projectUseCases, middlewares)
	dependencies := &Dependencies{
		ConfigLoader:        loader,
		GinServer:           server,
		GormRepository:      repository,
		PostgresRepository:  pkgpostgresqlRepository,
		SmtpService:         service,
		Middlewares:         middlewares,
		PersonHandler:       handler,
		UserHandler:         userHandler,
		NotificationHandler: notificationHandler,
		CropHandler:         cropHandler,
		CustomerHandler:     customerHandler,
		ManagerHandler:      managerHandler,
		FieldHandler:        fieldHandler,
		InvestorHandler:     investorHandler,
		LotHandler:          lotHandler,
		ProjectHandler:      projectHandler,
		PersonUseCases:      useCases,
		UserUseCases:        userUseCases,
		CropUseCases:        cropUseCases,
		CustomerUseCases:    customerUseCases,
		FieldUseCases:       fieldUseCases,
		InvestorUseCases:    investorUseCases,
		LotUseCases:         lotUseCases,
		ProjectUseCases:     projectUseCases,
	}
	return dependencies, nil
}

// wire.go:

type Dependencies struct {
	ConfigLoader       config.Loader
	GinServer          pkggin.Server
	GormRepository     pkggorm.Repository
	PostgresRepository pkgpostgresql.Repository
	SmtpService        pkgsmtp.Service

	Middlewares *pkgmwr.Middlewares

	PersonHandler       *person.Handler
	UserHandler         *user.Handler
	NotificationHandler *notification.Handler
	CropHandler         *crop.Handler
	CustomerHandler     *customer.Handler
	ManagerHandler      *manager.Handler
	FieldHandler        *field.Handler
	InvestorHandler     *investor.Handler
	LotHandler          *lot.Handler
	ProjectHandler      *project.Handler

	PersonUseCases   person.UseCases
	UserUseCases     user.UseCases
	CropUseCases     crop.UseCases
	CustomerUseCases customer.UseCases
	FieldUseCases    field.UseCases
	InvestorUseCases investor.UseCases
	LotUseCases      lot.UseCases
	ProjectUseCases  project.UseCases
}
