// File: internal/field/repository/repository.go
package field

import (
	"context"
	"errors"
	"fmt"

	gorm0 "gorm.io/gorm"

	gorm "github.com/alphacodinggroup/euxcel-backend/pkg/databases/sql/gorm"
	pkgtypes "github.com/alphacodinggroup/euxcel-backend/pkg/types"
	models "github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/field/repository/models"
	domain "github.com/alphacodinggroup/euxcel-backend/projects/euxcel-api/internal/field/usecases/domain"
)

type repository struct {
	db gorm.Repository
}

// NewRepository creates a new GORM repository for Field.
func NewRepository(db gorm.Repository) Repository {
	return &repository{db: db}
}

// CreateField persists a Field and returns its autogenerated ID.
func (r *repository) CreateField(ctx context.Context, f *domain.Field) (int64, error) {
	if f == nil {
		return 0, pkgtypes.NewError(pkgtypes.ErrValidation, "field is nil", nil)
	}
	model := models.FromDomain(f)
	if err := r.db.Client().WithContext(ctx).Create(model).Error; err != nil {
		return 0, pkgtypes.NewError(pkgtypes.ErrInternal, "failed to create field", err)
	}
	return model.ID, nil
}

// ListFields returns all fields.
func (r *repository) ListFields(ctx context.Context) ([]domain.Field, error) {
	var list []models.Field
	if err := r.db.Client().WithContext(ctx).Find(&list).Error; err != nil {
		return nil, pkgtypes.NewError(pkgtypes.ErrInternal, "failed to list fields", err)
	}
	result := make([]domain.Field, 0, len(list))
	for _, m := range list {
		result = append(result, *m.ToDomain())
	}
	return result, nil
}

// GetField retrieves a field by its ID.
func (r *repository) GetField(ctx context.Context, id int64) (*domain.Field, error) {
	var model models.Field
	err := r.db.Client().WithContext(ctx).Where("id = ?", id).First(&model).Error
	if err != nil {
		if errors.Is(err, gorm0.ErrRecordNotFound) {
			return nil, pkgtypes.NewError(pkgtypes.ErrNotFound, fmt.Sprintf("field with id %d not found", id), err)
		}
		return nil, pkgtypes.NewError(pkgtypes.ErrInternal, "failed to get field", err)
	}
	return model.ToDomain(), nil
}

// UpdateField updates an existing field.
func (r *repository) UpdateField(ctx context.Context, f *domain.Field) error {
	if f == nil {
		return pkgtypes.NewError(pkgtypes.ErrValidation, "field is nil", nil)
	}
	model := models.FromDomain(f)
	result := r.db.Client().WithContext(ctx).
		Model(&models.Field{}).
		Where("id = ?", f.ID).
		Updates(model)
	if result.Error != nil {
		return pkgtypes.NewError(pkgtypes.ErrInternal, "failed to update field", result.Error)
	}
	if result.RowsAffected == 0 {
		return pkgtypes.NewError(pkgtypes.ErrNotFound, fmt.Sprintf("field with id %d does not exist", f.ID), nil)
	}
	return nil
}

// DeleteField deletes a field by its ID.
func (r *repository) DeleteField(ctx context.Context, id int64) error {
	result := r.db.Client().WithContext(ctx).
		Delete(&models.Field{}, "id = ?", id)
	if result.Error != nil {
		return pkgtypes.NewError(pkgtypes.ErrInternal, "failed to delete field", result.Error)
	}
	if result.RowsAffected == 0 {
		return pkgtypes.NewError(pkgtypes.ErrNotFound, fmt.Sprintf("field with id %d does not exist", id), nil)
	}
	return nil
}
